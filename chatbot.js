document.addEventListener('DOMContentLoaded', () => {
    // --- SELEKSI ELEMEN DOM ---
    const chatBox = document.getElementById('chat-box');
    const userInput = document.getElementById('pesan');
    const sendButton = document.getElementById('kirim-btn');
    // ... sisa seleksi elemen tidak berubah ...
    const welcomeGreeting = document.getElementById('welcome-greeting');
    const themeSwitcher = document.getElementById('theme-switcher');
    const summarizeInput = document.getElementById('summarize-input');
    const summarizeBtn = document.getElementById('summarize-btn');
    const emailTo = document.getElementById('email-to');
    const emailSubject = document.getElementById('email-subject');
    const emailPoints = document.getElementById('email-points');
    const emailBtn = document.getElementById('email-btn');

    // --- STATE APLIKASI ---
    let conversationHistory = [];

    // --- FUNGSI TAMPILAN (UI) ---
    const setGreeting = () => { /* ... fungsi ini tidak berubah ... */ 
        const hour = new Date().getHours();
        let greeting = "Selamat Datang!";
        if (hour < 11) greeting = "Selamat Pagi!";
        else if (hour < 15) greeting = "Selamat Siang!";
        else if (hour < 19) greeting = "Selamat Sore!";
        else greeting = "Selamat Malam!";
        welcomeGreeting.textContent = greeting;
    };

    // FUNGSI TAMPILAN PESAN (DIPERBARUI UNTUK GAMBAR)
    const tampilkanPesan = (content, sender) => {
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', sender === 'user' ? 'user-msg' : 'bot-msg');
        
        let contentHtml = '';
        if (content.type === 'image') {
            contentHtml = `<div class="generated-image-container"><img src="${content.url}" alt="Generated by AI" loading="lazy"></div>`;
        } else {
            contentHtml = marked.parse(content.text);
        }

        const avatarHtml = `<div class="message-avatar">${sender === 'user' ? 'U' : 'A'}</div>`;
        const messageContentHtml = `<div class="message-content">${contentHtml}</div>`;
        
        messageElement.innerHTML = (sender === 'bot' ? avatarHtml : '') + messageContentHtml + (sender === 'user' ? avatarHtml : '');
        chatBox.appendChild(messageElement);

        messageElement.querySelectorAll('pre code').forEach(hljs.highlightElement);
        chatBox.scrollTop = chatBox.scrollHeight;
    };

    // FUNGSI UTAMA PENGIRIMAN PESAN (DIPERBARUI TOTAL)
    const kirimPesan = async () => {
        const promptText = userInput.value.trim();
        if (promptText === "") return;

        tampilkanPesan({ text: promptText }, 'user');
        userInput.value = "";

        // Keyword untuk mendeteksi permintaan gambar
        const imageKeywords = ['buatkan gambar', 'gambarkan', 'generate image', 'create an image of'];
        const isImageRequest = imageKeywords.some(keyword => promptText.toLowerCase().startsWith(keyword));

        const loadingIndicator = document.createElement('div');
        loadingIndicator.className = 'message bot-msg';
        loadingIndicator.innerHTML = `<div class="message-avatar">A</div><div class="message-content">${isImageRequest ? 'Sedang menggambar...' : 'Sedang berpikir...'}</div>`;
        chatBox.appendChild(loadingIndicator);
        chatBox.scrollTop = chatBox.scrollHeight;

        try {
            if (isImageRequest) {
                // Proses permintaan gambar
                const imagePrompt = promptText.replace(/buatkan gambar|gambarkan|generate image of|create an image of/i, '').trim();
                const response = await generateImage(imagePrompt);
                chatBox.removeChild(loadingIndicator);
                tampilkanPesan({ type: 'image', url: response.imageUrl }, 'bot');
            } else {
                // Proses permintaan teks biasa
                conversationHistory.push({ role: 'user', parts: [{ text: promptText }] });
                const responseText = await geminiChatAi(conversationHistory);
                chatBox.removeChild(loadingIndicator);
                tampilkanPesan({ text: responseText }, 'bot');
                conversationHistory.push({ role: 'model', parts: [{ text: responseText }] });
            }
        } catch (error) {
            chatBox.removeChild(loadingIndicator);
            tampilkanPesan({ text: `Maaf, terjadi kesalahan: ${error.message}` }, 'bot');
        }
    };

    // --- FUNGSI PANGGILAN API ---

    // Panggilan ke backend teks (tidak berubah)
    const geminiChatAi = async (history) => {
        const proxyUrl = '/api/gemini';
        const response = await fetch(proxyUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ history })
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `Error dari server: ${response.status}`);
        }
        const data = await response.json();
        return data.text;
    };

    // BARU: Panggilan ke backend gambar
    const generateImage = async (prompt) => {
        const proxyUrl = '/api/generate-image';
        const response = await fetch(proxyUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ prompt })
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || `Error dari server: ${response.status}`);
        }
        return await response.json();
    };
    
    // --- EVENT LISTENERS & INISIALISASI --- (tidak berubah)
    sendButton.addEventListener('click', kirimPesan);
    userInput.addEventListener('keypress', (e) => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); kirimPesan(); } });
    summarizeBtn.addEventListener('click', () => { /* ... */ });
    emailBtn.addEventListener('click', () => { /* ... */ });
    const applyTheme = (theme) => { /* ... */ };
    themeSwitcher.addEventListener('change', () => applyTheme(themeSwitcher.checked ? 'light' : 'dark'));
    setGreeting();
    applyTheme(localStorage.getItem('aiAssistantTheme') || 'dark');
});
